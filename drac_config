#!/bin/sh


usage() {
cat << EOF
Usage: drac_confing action server...
 action - action to perform:
  # Server access
  view            - connect to KVM

  # DRAC management
  racreset        - restart DRAC
  getsel          - get DRAC sel
  clrsel          - clear DRAC sel
  monuser         - configure monitoring user and its password
  rootpass        - set root user password
  enableipmi      - enable IPMI on the DRAC
  disablehotspare - disable PSU hotspare

  # Power management
  powerup         - power on
  powerdown       - power off
  hardreset       - hard reset

  # RAID (only iDRAC7 and 8)
  createraid      - build a RAID1 of 2 first disks
  deleteraid      - delete any existing RAIDs

  # DRAC deployment
  base            - configure all base settings: NTP, SNMP.
                    You can use DC environment variable to deploy settings for
                    a particular datacenter.
  setconsole      - configure virtual console access

  # SSL operations. Reuqires IG ca-utils in in the same directory as
  # drac_config is deployed.
  fullssl         - perform full ssl deployment
  resetssl        - reset SSL to default settings
  requestssl      - configure ssl settings and create a CSR
  deployssl       - deploy signed cert

 server - one or more servers to connect to
EOF
}

if [ -z "$1" ]; then
    echo "Give me action to perform!"
    usage
    exit 1
fi
action=$1

shift
if [ -z "$1" ]; then
    echo "Give me name of the server!"
    usage
    exit 1
fi

workdir=$(dirname $0)
oldpwd=$(pwd)
cd $workdir
export workdir=$(pwd)
export libdir=$workdir/lib
cd $oldpwd

. $workdir/config

if [ ! -f $RACADM ]; then
    echo "I could not find racadm binary $RACADM"
    exit 1
fi

if [ -z "$PASS" ]; then
    stty -echo
    read -p "Password for $USER: " PASS
    stty echo
    echo
    if [ -z "$PASS" ]; then
        echo "Empty password given!"
        exit 1
    fi
fi

while [ $# -ne 0 ]; do
    export host=$1
    export racadm="$RACADM -u ${USER} -p ${PASS} -r $host"

    echo " --- Working on $host --- "
    echo "Trying to determine iDRAC model..."
    ractype=$( ($racadm get iDRAC.Info | grep '#Type=' || $racadm  getconfig -g idracinfo | grep 'idRacType=' ) | tr -d '\r' | tr -d '\n' | cut -d '=' -f 2)
    echo "DRAC type is ${ractype}"

    case "$ractype" in
        8)
            export model="M1000e"
            ;;
        10)
            export model="iDRAC6-standalone"
            ;;
        11)
            export model="iDRAC6-blade"
            ;;
        16|17)
            export model="iDRAC7"
            ;;
        32|33)
            export model="iDRAC8"
            ;;
        "14G Monolithic"|"14G Modular")
            export model="iDRAC9"
            ;;
        "15G Monolithic"|"15G Modular")
            export model="iDRAC9"
            ;;
        *)
            echo "Unsupported ractype $ractype"
            exit 1
            ;;
    esac

    echo "It is $model"

    case "$action" in
        "view")
            sh $libdir/view.sh
            ;;
        "racreset")
            $racadm racreset
            ;;
        "clrsel")
            sh $libdir/sel.sh $action
            ;;
        "getsel")
            sh $libdir/sel.sh $action
            ;;
        "powerup")
            $racadm serveraction $action
            ;;
        "powerdown")
            $racadm serveraction $action
            ;;
        "hardreset")
            $racadm serveraction $action
            ;;
        "createraid")
            sh $libdir/raid.sh $action
            ;;
        "deleteraid")
            sh $libdir/raid.sh $action
            ;;
        "fullssl")
            sh $libdir/fullssl.sh
            ;;
        "resetssl")
            $racadm sslresetcfg
            ;;
        "requestssl")
            sh $libdir/requestssl.sh
            ;;
        "deployssl")
            sh $libdir/deployssl.sh
            ;;
        "base")
            sh $libdir/base.sh $action
            ;;
        "setconsole")
            sh $libdir/console.sh $action
            ;;
        "monuser")
            sh $libdir/monuser.sh
            ;;
        "rootpass")
            sh $libdir/rootpass.sh
            ;;
        "enableipmi")
            sh $libdir/ipmi.sh
            ;;
        "disablehotspare")
            sh $libdir/psu_redundancy.sh
            ;;
        *)
            echo "Uknown server action specified"
            ;;
    esac

    echo " --- Work on $host is finished --- "
    echo
    shift
done
